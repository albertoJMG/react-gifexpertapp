{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"qMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,0BAAMC,SAVU,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAaXM,GAbW,4CAAH,sDCCPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,yBAAKgB,UAAU,wDACX,yBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,2BAAIA,KCHHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAgBtC,OATAC,qBAAU,WACN1B,EAAQC,GAAU0B,MAAK,SAAAC,GACnBH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGlB,CAACtB,IAEGuB,EDb2BK,CAAa5B,GAAjCa,EAFuB,EAE7BN,KAAce,EAFe,EAEfA,QAEtB,OACI,oCACI,wBAAIJ,UAAU,qCAAqClB,GAClDsB,GAAW,uBAAGJ,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aAEPL,EAAOJ,KAAI,SAAAC,GACP,OAEI,kBAAC,EAAD,eACImB,IAAKnB,EAAIC,IACLD,UEwBrBoB,EAvCM,WAAO,IAAD,EAEa5C,mBAAS,CAAC,cAFvB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAWvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAGQ8C,EAAWtB,KAAI,SAAAT,GACX,OAAO,kBAAC,EAAD,CACH6B,IAAK7B,EACLA,SAAUA,UCxBhCgC,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OACP,kBAAC,EAAD,MAAkBJ,I","file":"static/js/main.92f4bd9f.chunk.js","sourcesContent":["\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const hanleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const hanleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {                     //Validacion para que no nos envien elementos vacios\n            setCategories(cats => [inputValue, ...cats]);       //Como se pasa por referencia, setCategories puede acceder al array\n            setInputValue(\"\");                                  //Ponemos el input en blanco\n\n        }\n    }\n\n    return (\n        <form onSubmit={hanleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={hanleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\nexport const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=lY7JQPsUIFa2vSojxyxlo1rHaOjPXFv6`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n\n        }\n    })\n    // console.log(gifs);\n    return (gifs);\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {            //Desestructuracion del props\n    console.log(id, title, url)\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__slow\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category); //Desestructuramos el objeto que nos pasa useFetchGifs.js \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map(img => {\n                        return (\n\n                            <GifGridItem\n                                key={img.id}\n                                {...img}\n                            />\n                        )\n                    })\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {               //De este modo hacemos que la funcion getGifs() se renderice una sola vez\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })\n        });\n    }, [category])                  //Dependencia\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    // const handleAdd = () => {\n    //     // setCategories([...categories, 'Eureka Seven']);\n    //     setCategories(cats => [...cats, 'Eureka Seven']); //Mediante callbacks. cats es categories\n    // }\n\n\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n\n\n\n            <ol>\n\n                {\n                    categories.map(category => {\n                        return <GifGrid\n                            key={category}\n                            category={category} />\n                    })\n                }\n\n            </ol>\n        </>\n    )\n\n}\n\n\n\n\n\nexport default GifExpertApp\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nconst divRoot = document.querySelector('#root');\n\nReactDOM.render(\n  <GifExpertApp />, divRoot\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}